
TASK BOARD

User Interface - display movable window icons
    Try to run ahk as admin
    Try WinMinimizeAllUndo, Win-m, Win-shift-m, Win-d
    https://autohotkey.com/board/topic/34408-showhide-desktop-toggle-w-one-hotkey/

    Send key ctrl-f4 for excel to close a single excel workbook instead of whole excel process
        check process name EXCEL.EXE and send key ctrl-f4 or send message wm_syscommand and sc_close
        (cannot find out how to send keys by post/send messages)

    keyboard operations

    Update task icon by double-click on TaskBoard

    Initialize task board by right double-click on TaskBoard
    Align icons to grid


    Scroll by mouse-wheel and dragging freely
    Go back to start point (left-bottom) by double-click on board

    scaling contents?
    scaling icon?


    <Done>
    Update task icon by right-click menu on TaskBoard
    Close task icon by right-click menu on Task

    Resolved problem for overlapped scatters

    Select multiple icons by dragging to move them at once
    Resolve duplication of highlighted icon

    Create, move, icons
        Kivy Scatter widget

    Initialize icons
        build(), On_start(), on_resume()

    Click Action
        GetWindowPlacement()
        ShowWindow()
        SetForegroundWindow()



Architecture - follow the concept of the kivy

    Now I understand the touch event bubbling starts from root widget!!
    And Scatter grabs touch always, which means on_touch_up called twice for the clicked scatter widget

    Full distribution vs full centralization vs partial distribution vs mixed by event
        CURRENT DESIGN
        1. In normal case, all on_touch_* processes should be done on root widget
           and return True.
           (It is because most of processes need to consider other widget status)
        2. If needed return super() on_touch_* to propagate the touch.
        3. Do not use super() on_touch_* outside of return statement.

        May the followings be the basic rule matching concept of kivy architecture?
        1. Return True or return super() on_touch_*.
        2. In normal case, return super() after the class-specific process
           and propagate it to allover the widget tree.
        3. Return True only if you need it.

    Should all SubMenu on the board?


    Make it clear what happens in which widget on what touch event
        <situations>
        - left or right button
        - click or drag (or double click)
        - on the board, on the selected task or on the unselected task

        <functions>
        *LEFT*
        - touch down
            Deselect/reselect tasks - Click on anywhere other than the selected tasks

        - touch move
            Resize select Box - Start dragging from the board
            Select the tasks - Start dragging from the board and collide the box with tasks
            Move the task -  Start dragging from the task
            Move the selected tasks - Start dragging from the one of the selected tasks

        - touch up
            Set foreground the task - left click on the task regardless of selected or not
            Hide the select box

        *RIGHT*
        - touch up
            show close menu - right click on the task
            show redraw menu - right click on the board
            enter modal mode - right click anywhere

        Other actions does not matter.


Data Management - gather window information
    Get list of window handle:
        EnumWindows and GetWindowLong

    Get icon handle:
        SendMessage or GetClassLong
        OR GetWindowThreadProcessId, OpenProcess and GetModuleBaseNameA

    Get icon image:

        hdc = win32ui.CreateDCFromHandle(win32gui.GetDC(0))
        hbmp = win32ui.CreateBitmap()
        hbmp.CreateCompatibleBitmap(hdc, ico_x, ico_x)
        hdc = hdc.CreateCompatibleDC()
        hdc.SelectObject(hbmp)
        hdc.DrawIcon((0, 0), hIcon)

        Why doing CreateDCFromHandle after GetDC? (getDC returns int CreateDCFromHandle returns object)
        Why hdc.CreateCompatibleDC() for itself?

    Pass the image to the Kivy Image()

Considration for the Architecture